;Escreva um programa que inverta a ordem de um vetor de 7 posições, isto é, o primeiro
;elemento se tornará o último, o último se tornará o primeiro e assim sucessivamente. Ler o vetor
;e imprimir depois de inverter a ordem. NÃO UTILIZAR UM VETOR AUXILIAR. Utilizar BX, SI e DI
;nas diversas manipulação de vetor (ler, inverter e imprimir). Cada função (ler, inverter e
;imprimir) deverá ser um procedimento

PRINTS MACRO STRING ;MACRO PARA IMPRIMIR UMA STRING
    PUSH AX ; PRESERVA CONTEXTO
    PUSH DX

    MOV AH, 9
    LEA DX, STRING ; IMPRIME A STRING
    INT 21H

    POP DX
    POP AX ;RESTAURA CONTEXTO
ENDM

PRINTC MACRO CHAR ;MACRO PARA PRINTAR UM CARACTER
    PUSH AX ; PRESERVA CONTEXTO
    PUSH DX

    MOV AH, 2
    MOV DL, CHAR ; IMPRIME CARACTER
    INT 21H

    POP DX
    POP AX ; RESTAURA CONTEXTO
ENDM

.MODEL SMALL

.STACK 100H

.DATA
    VETOR DB 7 DUP(?)
    READ DB "Digite os elementos do vetor: $"
    ELEM DB 10,13,"Elementos do vetor invertido: $"


.CODE

MAIN PROC 
    MOV AX, @DATA
    MOV DS, AX

    CALL LER_VETOR ;CHAMA PROCEDIMENTO RESPONSAVEL POR LER O VETOR

    CALL INVERTER_VETOR ;CHAMA PROCEDIMENTO RESPONSAVEL POR INVERTER AS POSIÇÕES DO VETOR

    CALL PRINT_VETOR ;CHAMA PROCEDIMENTO QUE IMPRIME O VETOR

    FIM:
    MOV AH, 4CH
    INT 21H
MAIN ENDP 

;====================

LER_VETOR PROC 
    ;ESTE PROCEDIMENTO INICIA UM CONTADOR COM A QUANTIDADE DE POSIÇÕES DO VETOR E CRIA UM LOOP PARA LÊ-LO

    PRINTS READ

    MOV CX, 7 ;INICIA CX COM 7, JA QUE O VETOR TEM 7 POSIÇÕES
    XOR SI, SI ;ZERA SI

    MOV AH, 1 ;PEDE AO USUÁRIO DIGITAR UM ELEMENTO

    LER_LOOP:

    INT 21H
    SUB AL, 30H ;TRANSFORMA-O EM NUMEROS
    MOV VETOR[SI], AL ;POSICIONA-OS DENTRO DO VETOR
    INC SI ;INCREMENTA A POSIÇÃO DO VETOR
    LOOP LER_LOOP ; LOOP ENQUANTO CX != 0
    
    RET
LER_VETOR ENDP

;====================

INVERTER_VETOR PROC
    ;PROCEDIMENTO RESPOSAVEL POR INVERTER O VETOR
    ;ARMAZENA EM BX A PRIMEIRA POSIÇÃO DO VETOR E EM DI A ULTIMA 
    ;COLOCA ESTES ELEMENTOS EM AL E DL RESPECTIVAMENTE
    ;INVERTE ESTES ELEMENTOS ARMAZENANDO AL EM DI E DL EM BX
    ;INCREMENTA BX E DECREMENTA DI
    ;ENQUANTO ELES FOREM DIFERENTES, CONTINUA A INVERSÃO

    XOR BX, BX ;INICIA COM A PRIMEIRA POSICAO DO VETOR
    MOV DI, 6 ;INICIA COM A ULTIMA POSICAO DO VETOR

    INVERTER_LOOP:

    MOV AL, VETOR[BX] ;MOVE PARA AL A POSIÇÃO DE BX
    MOV DL, VETOR[DI] ;MOVE PARA DL A POSIÇÃO DE DI

    MOV VETOR[BX], DL ;MOVE O QUE ESTA ARMAZENADO EM DL PARA A POSIÇÃO BX DO VETOR
    MOV VETOR[DI], AL ;MOVE O QUE ESTA ARMAZENADO EM AL PARA A POSIÇÃO DI DO VETOR

    INC BX ;INCREMENTA A BX PARA PERCORRER O VETOR
    DEC DI ;DECREMENTA DI PARA PERCORRER O VETOR AO CONTRARIO

    CMP BX, DI  ;COMPARA AMBOS
    JAE CONTINUA  ;SE FOR >=, SAI DA FUNÇAO
    JMP INVERTER_LOOP ;CASO CONTRARIO CONTINUA NO LOOP

    CONTINUA:
    RET

INVERTER_VETOR ENDP

;====================

PRINT_VETOR PROC
    ; PROCEDIMENTO PARA IMPRIMIR O VETOR 
    ; PERCORRE CADA POSIÇÃO E IMPRIME O QUE ESTA PRESENTE NELA
     
    PRINTS ELEM

    MOV CX, 7  ; INICIA CONTADOR COMO 7
    XOR SI, SI  ; INICIA SI COMO 0

    PRINT_LOOP:
    MOV AL, VETOR[SI] ;MOVE A POSIÇÃO SI DO VETOR PARA AL
    ADD AL, 30H ; TRANSFORMA AL PARA ASCII

    PRINTC AL ;IMPRIME AL 

    INC SI ;INCREMENA SI
    LOOP PRINT_LOOP ;IMPRIME ENQUANTO CX FOR > 0

    RET

PRINT_VETOR ENDP


END MAIN